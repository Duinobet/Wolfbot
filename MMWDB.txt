resetall()
chance = math.random(5,80) --generate chance 
lsratio = 8  --max loss streak. ex. 2(multi)*8(lsratio)=16(max loss streak)
edge = 1

--nothing to change below. Everyhting should be calculated based on above

convertedMulti = string.format("%.4f", (100 - 1) / chance)
lossStreaks    = convertedMulti*lsratio
if lossStreaks % 1 ~= 0 then
    local int_part = string.match(lossStreaks, "^%d+")
  lossStreaks = tonumber(int_part) + 1
end
bethigh = (math.random(2) == 1) and true or false
increaseOnLoss      = (((100-edge)/((100-edge)-chance))-1)*100.00
increaseOnLossMulti = (100-edge)/((100-edge)-chance)
calculateBetSize    = (balance/10) * (increaseOnLoss/100) / ((1+(increaseOnLoss/100))^lossStreaks - 1)
basebet             = calculateBetSize-(calculateBetSize/200)
nextbet             = basebet

function dobet()
    if win then
         bethigh = (math.random(2) == 1) and true or false 
         chance  = math.random(5,80)
        convertedMulti = string.format("%.4f", (100 - 1) / chance)
        lossStreaks    = convertedMulti*lsratio
        if lossStreaks % 1 ~= 0 then
            local int_part = string.match(lossStreaks, "^%d+")
            lossStreaks = tonumber(int_part) + 1
        end
        edge           = 1
        bethigh = (math.random(2) == 1) and true or false
        increaseOnLoss      = (((100-edge)/((100-edge)-chance))-1)*100.00
        increaseOnLossMulti = (100-edge)/((100-edge)-chance)
        calculateBetSize    = (balance/10) * (increaseOnLoss/100) / ((1+(increaseOnLoss/100))^lossStreaks - 1)
        basebet             = calculateBetSize-(calculateBetSize/200)
        nextbet             = basebet
    else 
        nextbet = previousbet*increaseOnLossMulti 
    end
end
